name: AWO Run (Manual Approve to Commit)

on:
  workflow_dispatch:
    inputs:
      workflow_file:
        description: "Workflow JSON path"
        required: true
        default: "workflows/multimodel.json"

permissions:
  contents: write

concurrency:
  group: awo-run
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  # ---- Preflight: validate the workflow JSON before running -----------------
  validate_workflow_json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Validate JSON syntax
        run: |
          set -euo pipefail
          WF="${{ github.event.inputs.workflow_file }}"
          echo "Validating: $WF"
          test -f "$WF" || { echo "::error::Workflow file not found: $WF"; exit 1; }
          jq . "$WF" >/dev/null
          echo "Workflow JSON is valid."

      - name: Setup Python for schema validation
        if: ${{ hashFiles('workflows/schema.json') != '' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Validate against schema (if present)
        if: ${{ hashFiles('workflows/schema.json') != '' }}
        run: |
          set -euo pipefail
          pip install --disable-pip-version-check -q jsonschema
          python - <<'PY'
          import json
          from jsonschema import Draft202012Validator
          wf_path = "${{ github.event.inputs.workflow_file }}"
          schema_path = "workflows/schema.json"
          with open(wf_path) as f: data = json.load(f)
          with open(schema_path) as f: schema = json.load(f)
          Draft202012Validator(schema).validate(data)
          print("Workflow JSON passes schema.")
          PY

  # ---- Run AWO core ---------------------------------------------------------
  run_awo:
    needs: validate_workflow_json
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.capture.outputs.run_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (if requirements.txt exists)
        if: ${{ hashFiles('requirements.txt') != '' }}
        run: |
          pip install --upgrade --disable-pip-version-check -r requirements.txt

      - name: Execute AWO workflow
        id: runstep
        run: |
          set +e
          python scripts/awo_run.py "${{ github.event.inputs.workflow_file }}"
          code=$?
          echo "runner_exit_code=$code" >> "$GITHUB_ENV"
          if [ "$code" = "78" ]; then
            echo "Audit: PENDING (human approval will be required)" >> "$GITHUB_STEP_SUMMARY"
          elif [ "$code" = "0" ]; then
            echo "Audit: PASSED (this workflow still requires manual approval)" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "::error::AWO runner failed with exit code $code"
            exit $code
          fi

      - name: Capture Run-ID (from breadcrumb)
        id: capture
        run: |
          set -euo pipefail
          if [ ! -f runs/LAST_RUN ]; then
            echo "::error::runs/LAST_RUN not found (no run recorded)."
            echo "run_id=none" >> "$GITHUB_OUTPUT"
            exit 1
          fi
          RID="$(cat runs/LAST_RUN)"
          case "$RID" in
            (*[!A-Za-z0-9._-]*|'') echo "::error::Invalid RUN_ID format: '$RID'"; exit 1;;
          esac
          test -d "runs/$RID" || { echo "::error::Run directory missing: runs/$RID"; exit 1; }
          echo "Run-ID: $RID" >> "$GITHUB_STEP_SUMMARY"
          echo "RUN_ID=$RID" >> "$GITHUB_ENV"
          echo "run_id=$RID" >> "$GITHUB_OUTPUT"
          echo "- Artifact: awo-run-$RID" >> "$GITHUB_STEP_SUMMARY"

      - name: Create payload
        run: |
          set -euo pipefail
          tar -czf "awo-run-${RUN_ID}.tar.gz" "runs/${RUN_ID}"

      - name: Upload payload
        uses: actions/upload-artifact@v4
        with:
          name: awo-run-${{ env.RUN_ID }}
          path: awo-run-${{ env.RUN_ID }}.tar.gz
          if-no-files-found: error
          retention-days: 14

  # ---- Render human-readable summary BEFORE approvals -----------------------
  render_summary:
    needs: run_awo
    if: ${{ needs.run_awo.outputs.run_id != '' && needs.run_awo.outputs.run_id != 'none' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download payload
        uses: actions/download-artifact@v4
        with:
          name: awo-run-${{ needs.run_awo.outputs.run_id }}
          path: artifacts

      - name: Ensure artifact exists
        run: |
          set -euo pipefail
          test -f "artifacts/awo-run-${{ needs.run_awo.outputs.run_id }}.tar.gz" \
            || { echo "::error::Artifact missing; check run_awo job"; exit 1; }

      - name: Extract run
        id: locate
        run: |
          set -euo pipefail
          TAR="artifacts/awo-run-${{ needs.run_awo.outputs.run_id }}.tar.gz"
          mkdir -p extracted && tar -xzf "$TAR" -C extracted
          RD="extracted/runs/${{ needs.run_awo.outputs.run_id }}"
          echo "rd=$RD" >> "$GITHUB_OUTPUT"
          echo "### Files" >> "$GITHUB_STEP_SUMMARY"
          find "$RD" -maxdepth 2 -type f | sed 's/^/- /' >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Run folder:** $RD" >> "$GITHUB_STEP_SUMMARY"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Show scope summary (if present)
        run: |
          set -euo pipefail
          RD="${{ steps.locate.outputs.rd }}"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "## Scope Gate — Machine Check" >> "$GITHUB_STEP_SUMMARY"
          if [ -f "$RD/scope/summary.json" ]; then
            OVERALL="$(jq -r '.overall_ok' "$RD/scope/summary.json" 2>/dev/null || echo null)"
            echo "**overall_ok:** \`$OVERALL\`" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo '```json' >> "$GITHUB_STEP_SUMMARY"
            cat "$RD/scope/summary.json" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          else
            echo "_No scope/summary.json found (scope_validate may be missing)._" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Show run report excerpt (redacted)
        run: |
          set -euo pipefail
          RD="${{ steps.locate.outputs.rd }}"
          if [ -f "$RD/report.md" ]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "## Run Report (excerpt)" >> "$GITHUB_STEP_SUMMARY"
            sed -E 's/(api|key|secret|token)=[^ ]+/REDACTED/gI' "$RD/report.md" | head -n 120 >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "_Full report will be committed after approval._" >> "$GITHUB_STEP_SUMMARY"
          fi

  # ---- Early manual gate (Scope) --------------------------------------------
  scope_gate:
    needs: [run_awo, render_summary]
    if: ${{ needs.run_awo.outputs.run_id != '' && needs.run_awo.outputs.run_id != 'none' }}
    runs-on: ubuntu-latest
    environment:
      name: awo-scope
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Await scope approval
        run: echo "Scope Gate — review the 'render_summary' job summary above, then approve this environment to continue."

  # ---- Final manual gate (Merge) --------------------------------------------
  human_approval:
    needs: [run_awo, scope_gate]
    if: ${{ needs.run_awo.outputs.run_id != '' && needs.run_awo.outputs.run_id != 'none' }}
    runs-on: ubuntu-latest
    environment:
      name: awo-audit
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Await merge approval
        run: echo "Merge Gate — Approve in Environment 'awo-audit' to commit run to the repo."

  # ---- Commit artifacts after approval --------------------------------------
  finalize:
    needs: [run_awo, human_approval]
    if: ${{ needs.run_awo.outputs.run_id != '' && needs.run_awo.outputs.run_id != 'none' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with credentials)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Download payload
        uses: actions/download-artifact@v4
        with:
          name: awo-run-${{ needs.run_awo.outputs.run_id }}
          path: artifacts

      - name: Extract run folder (guarded)
        run: |
          set -euo pipefail
          RID="${{ needs.run_awo.outputs.run_id }}"
          case "$RID" in
            (*[!A-Za-z0-9._-]*|'') echo "::error::Invalid RUN_ID format: '$RID'"; exit 1;;
          esac
          TAR="artifacts/awo-run-${RID}.tar.gz"
          mkdir -p extracted && tar -xzf "$TAR" -C extracted
          rsync -a extracted/runs/ runs/
          echo "RUN_ID=${RID}" >> "$GITHUB_ENV"
          echo "Finalizing ${RID}" >> "$GITHUB_STEP_SUMMARY"

      - name: Write approval record
        run: |
          set -euo pipefail
          mkdir -p "runs/${RUN_ID}"
          cat > "runs/${RUN_ID}/approval.json" <<EOF
          {
            "run_id": "${RUN_ID}",
            "approved_by": "${{ github.actor }}",
            "approved_at": "$(date -u +%FT%TZ)",
            "workflow_run_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF

      - name: Commit run to branch
        run: |
          set -euo pipefail
          BR="${GITHUB_REF_NAME:-main}"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin "$BR" --depth=1
          git switch "$BR"
          git add "runs/${RUN_ID}" || true
          if git diff --staged --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "AWO: add ${RUN_ID} (human-approved) [skip ci]"
          git push origin "$BR"
