name: AWO Run (Manual Approve to Commit)

on:
  workflow_dispatch:
    inputs:
      workflow_file:
        description: "Workflow JSON path"
        required: true
        default: "workflows/multimodel.json"

permissions:
  contents: write

concurrency:
  group: awo-run
  cancel-in-progress: false

jobs:
  run_awo:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.capture.outputs.run_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Execute AWO workflow
        id: runstep
        shell: bash
        run: |
          set +e
          python scripts/awo_run.py "${{ github.event.inputs.workflow_file }}"
          code=$?
          echo "runner_exit_code=$code" >> $GITHUB_ENV
          if [ "$code" = "78" ]; then
            echo "Audit: PENDING (human approval will be required)" >> $GITHUB_STEP_SUMMARY
          else
            echo "Audit: PASSED (this workflow still requires manual approval)" >> $GITHUB_STEP_SUMMARY
          fi
          exit 0

      - name: Capture Run-ID (from breadcrumb)
        id: capture
        shell: bash
        run: |
          set -e
          if [ ! -f runs/LAST_RUN ]; then
            echo "No LAST_RUN breadcrumb found." >&2
            echo "run_id=none" >> $GITHUB_OUTPUT
            exit 1
          fi
          RID="$(cat runs/LAST_RUN)"
          if [ ! -d "runs/$RID" ]; then
            echo "LAST_RUN points to missing directory: runs/$RID" >&2
            echo "run_id=none" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "Run-ID: $RID" >> $GITHUB_STEP_SUMMARY
          echo "RUN_ID=$RID" >> $GITHUB_ENV
          echo "run_id=$RID" >> $GITHUB_OUTPUT

      - name: Create payload
        shell: bash
        run: tar -czf "awo-run-${RUN_ID}.tar.gz" "runs/${RUN_ID}"

      - name: Upload payload
        uses: actions/upload-artifact@v4
        with:
          name: awo-run-${{ env.RUN_ID }}
          path: awo-run-${{ env.RUN_ID }}.tar.gz
          if-no-files-found: error

  # ---------- Upgraded human-in-the-loop review ----------
  human_approval:
    needs: run_awo
    runs-on: ubuntu-latest
    environment:
      name: awo-audit
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Download run artifact
        uses: actions/download-artifact@v4
        with:
          name: awo-run-${{ needs.run_awo.outputs.run_id }}
          path: artifacts
        continue-on-error: true

      - name: Extract & locate run folder (never fail)
        id: locate
        shell: bash
        run: |
          set +e
          TAR="artifacts/awo-run-${{ needs.run_awo.outputs.run_id }}.tar.gz"
          mkdir -p extracted
          if [ -f "$TAR" ]; then
            tar -xzf "$TAR" -C extracted
            RUN_DIR="$(ls -1d extracted/runs/run_* 2>/dev/null | head -n1)"
          fi
          echo "RUN_DIR=${RUN_DIR:-}" >> $GITHUB_ENV
          echo "RUN_DIR=${RUN_DIR:-}" >> $GITHUB_OUTPUT
          # Soft error note for the summary
          if [ -z "${RUN_DIR:-}" ]; then
            echo "NO_RUN_DIR=1" >> $GITHUB_ENV
          fi

      - name: Install jq (for parsing)
        shell: bash
        run: sudo apt-get update -y && sudo apt-get install -y jq
        continue-on-error: true

      - name: Render approval summary (always succeed)
        shell: bash
        run: |
          set +e
          echo "# AWO Review Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** \`${{ needs.run_awo.outputs.run_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Actions run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${NO_RUN_DIR:-}" = "1" ]; then
            echo "> ⚠️ Could not locate extracted run folder. Download the artifact below to review manually." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          RD="$RUN_DIR"
          # Basic metadata
          if [ -f "$RD/index.json" ]; then
            STATUS=$(jq -r '.status' "$RD/index.json" 2>/dev/null)
            START=$(jq -r '.started_at' "$RD/index.json" 2>/dev/null)
            FIN=$(jq -r '.finished_at // ""' "$RD/index.json" 2>/dev/null)
            echo "- **Status:** ${STATUS:-unknown}" >> $GITHUB_STEP_SUMMARY
            echo "- **Started:** ${START:-unknown}" >> $GITHUB_STEP_SUMMARY
            [ -n "$FIN" ] && echo "- **Finished:** $FIN" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Consensus preview
          CONS_JSON=$(ls "$RD/steps"/*consensus*.json 2>/dev/null | head -n1)
          if [ -n "$CONS_JSON" ]; then
            CONS=$(jq -r '.consensus_text // ""' "$CONS_JSON" 2>/dev/null)
            VOTERS=$(jq -r '.voters | join(", ")' "$CONS_JSON" 2>/dev/null)
            AGR=$(jq -r '.agreement_ratio' "$CONS_JSON" 2>/dev/null)
            echo "## Consensus" >> $GITHUB_STEP_SUMMARY
            echo "- **Voters:** ${VOTERS:-n/a}" >> $GITHUB_STEP_SUMMARY
            [ -n "$AGR" ] && echo "- **Agreement ratio:** $AGR" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            if [ -n "$CONS" ]; then
              echo "```text" >> $GITHUB_STEP_SUMMARY
              echo "$CONS" | head -n 30 >> $GITHUB_STEP_SUMMARY
              echo "```" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          # Fan-out preview
          FAN_JSON=$(ls "$RD/steps"/*fanout*.json 2>/dev/null | head -n1)
          if [ -n "$FAN_JSON" ]; then
            echo "## Fan-out candidates" >> $GITHUB_STEP_SUMMARY
            jq -r '.outputs[] | "- **\(.model)** → \(.text|tostring|gsub("\n";" ")|.[:200])"' "$FAN_JSON" 2>/dev/null >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          # Notes (if any)
          if [ -d "$RD/artifacts/notes" ]; then
            echo "## Notes (previews)" >> $GITHUB_STEP_SUMMARY
            for f in "$RD"/artifacts/notes/* 2>/dev/null; do
              [ -f "$f" ] || continue
              echo "**$(basename "$f")**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "```text" >> $GITHUB_STEP_SUMMARY
              head -n 30 "$f" >> $GITHUB_STEP_SUMMARY
              echo "```" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            done
          fi

          # Report snippet
          if [ -f "$RD/report.md" ]; then
            echo "## Report excerpt" >> $GITHUB_STEP_SUMMARY
            echo "<details><summary>Show first 60 lines</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```markdown' >> $GITHUB_STEP_SUMMARY
            head -n 60 "$RD/report.md" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "🔗 **Artifacts:** See the “Artifacts” section of this job for the tarball if you prefer local review." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Approve or Reject using the “Review pending deployments” banner above (environment: **awo-audit**)._ " >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Keep job green (gate is handled by environment)
        run: echo "Rendered summary for human approval."

  finalize:
    needs: [run_awo, human_approval]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Download run artifact
        uses: actions/download-artifact@v4
        with:
          name: awo-run-${{ needs.run_awo.outputs.run_id }}
          path: artifacts

      - name: Extract run folder
        shell: bash
        run: |
          set -e
          TAR="artifacts/awo-run-${{ needs.run_awo.outputs.run_id }}.tar.gz"
          [ -f "$TAR" ] || { echo "Artifact tarball not found: $TAR" >&2; exit 1; }
          mkdir -p extracted
          tar -xzf "$TAR" -C extracted
          rsync -a extracted/runs/ runs/
          RID=$(ls -1dt runs/run_* | head -n1 | xargs -n1 basename)
          echo "RUN_ID=$RID" >> $GITHUB_ENV
          echo "Finalizing $RID" >> $GITHUB_STEP_SUMMARY

      - name: Write approval record
        shell: bash
        run: |
          set -e
          mkdir -p "runs/${RUN_ID}"
          cat > "runs/${RUN_ID}/approval.json" <<EOF
          {
            "run_id": "${RUN_ID}",
            "approved_by": "${{ github.actor }}",
            "approved_at": "$(date -u +%FT%TZ)",
            "workflow_run_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF

      - name: Build consolidated run_summary.json
        shell: bash
        run: |
          set -e
          RD="runs/${RUN_ID}"
          CONS=$(ls "$RD/steps"/*consensus*.json 2>/dev/null | head -n1)
          FAN=$(ls "$RD/steps"/*fanout*.json 2>/dev/null | head -n1)
          jq -n \
            --arg rid "$RUN_ID" \
            --argjson idx "$(cat "$RD/index.json" 2>/dev/null || echo '{}')" \
            --argjson cons "$(cat "$CONS" 2>/dev/null || echo '{}')" \
            --argjson fan "$(cat "$FAN" 2>/dev/null || echo '{}')" \
            --argjson appr "$(cat "$RD/approval.json" 2>/dev/null || echo '{}')" '
              {
                run_id: $rid,
                index: $idx,
                consensus: {
                  voters: ($cons.voters // []),
                  agreement_ratio: ($cons.agreement_ratio // null),
                  consensus_text: ($cons.consensus_text // null)
                },
                fanout: ($fan.outputs // []),
                approval: $appr
              }' > "$RD/run_summary.json"
          echo "Wrote $RD/run_summary.json" >> $GITHUB_STEP_SUMMARY

      - name: Commit run to branch
        shell: bash
        run: |
          set -e
          BR="${GITHUB_REF_NAME:-main}"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin "$BR" --depth=1
          git switch "$BR"
          git add "runs/${RUN_ID}" || true
          if git diff --staged --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "AWO: add ${RUN_ID} (human-approved) [skip ci]"
          git push origin "$BR"
