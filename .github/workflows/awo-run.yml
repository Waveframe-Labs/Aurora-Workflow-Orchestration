name: AWO Run (Manual Approve to Commit)

on:
  workflow_dispatch:
    inputs:
      workflow_file:
        description: "Workflow JSON path"
        required: true
        default: "workflows/multimodel.json"

permissions:
  contents: write

concurrency:
  group: awo-run
  cancel-in-progress: false

jobs:
  run_awo:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.capture.outputs.run_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Execute AWO workflow
        id: runstep
        shell: bash
        run: |
          set +e
          python scripts/awo_run.py "${{ github.event.inputs.workflow_file }}"
          code=$?
          echo "runner_exit_code=$code" >> "$GITHUB_ENV"
          if [ "$code" = "78" ]; then
            echo "Audit: PENDING (human approval will be required)" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Audit: PASSED (this workflow still requires manual approval)" >> "$GITHUB_STEP_SUMMARY"
          fi
          exit 0

      - name: Capture Run-ID (from breadcrumb)
        id: capture
        shell: bash
        run: |
          set -e
          if [ ! -f runs/LAST_RUN ]; then
            echo "run_id=none" >> "$GITHUB_OUTPUT"
            echo "No LAST_RUN breadcrumb found." >&2
            exit 1
          fi
          RID="$(cat runs/LAST_RUN)"
          if [ ! -d "runs/$RID" ]; then
            echo "run_id=none" >> "$GITHUB_OUTPUT"
            echo "LAST_RUN points to missing directory: runs/$RID" >&2
            exit 1
          fi
          echo "Run-ID: $RID" >> "$GITHUB_STEP_SUMMARY"
          echo "RUN_ID=$RID" >> "$GITHUB_ENV"
          echo "run_id=$RID" >> "$GITHUB_OUTPUT"

      - name: Create payload
        shell: bash
        run: |
          set -e
          tar -czf "awo-run-${RUN_ID}.tar.gz" "runs/${RUN_ID}"

      - name: Upload payload
        uses: actions/upload-artifact@v4
        with:
          name: awo-run-${{ env.RUN_ID }}
          path: awo-run-${{ env.RUN_ID }}.tar.gz
          if-no-files-found: error

  # ---- Render scope report BEFORE any approval gates -------------------------
  scope_preview:
    needs: run_awo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: awo-run-${{ needs.run_awo.outputs.run_id }}
          path: artifacts

      - name: Extract & locate run folder
        id: locate
        shell: bash
        run: |
          set -e
          TAR="artifacts/awo-run-${{ needs.run_awo.outputs.run_id }}.tar.gz"
          mkdir -p extracted
          tar -xzf "$TAR" -C extracted
          RD="extracted/runs/${{ needs.run_awo.outputs.run_id }}"
          echo "rd=$RD" >> "$GITHUB_OUTPUT"
          ls -l "$RD" || true
          [ -f "$RD/scope/summary.json" ] || echo "WARN: scope/summary.json missing"

      - name: Install jq (for parsing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Render scope summary
        shell: bash
        run: |
          set -e
          RD="${{ steps.locate.outputs.rd }}"
          if [ -f "$RD/scope/summary.json" ]; then
            OVERALL="$(jq -r '.overall_ok' "$RD/scope/summary.json" 2>/dev/null || echo null)"
            {
              echo "# Scope Gate — Pre-Review"
              echo
              echo "Below is the machine check of testability (predictions/tolerances or falsification tests)."
              echo
              echo "**overall_ok:** \`$OVERALL\`"
              echo
              echo '```json'
              cat "$RD/scope/summary.json"
              echo '```'
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "No scope summary found. The scope gate will likely require attention." >> "$GITHUB_STEP_SUMMARY"
          fi

  # ---- Scope approval gate (uses environment protection) --------------------
  scope_gate:
    needs: [run_awo, scope_preview]
    runs-on: ubuntu-latest
    environment:
      name: awo-scope
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - run: echo "Scope Gate — review the 'scope_preview' job summary above, then approve to continue."

  # ---- Human approval (merge gate) ------------------------------------------
  human_approval:
    needs: [run_awo, scope_gate]
    runs-on: ubuntu-latest
    environment:
      name: awo-audit
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - run: echo "Manual approval (merge gate) — approve in Environment 'awo-audit' to continue."

  # ---- Finalize: commit approved run into main ------------------------------
  finalize:
    needs: [run_awo, human_approval]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - uses: actions/download-artifact@v4
        with:
          name: awo-run-${{ needs.run_awo.outputs.run_id }}
          path: artifacts

      - name: Extract run folder
        shell: bash
        run: |
          set -e
          TAR="artifacts/awo-run-${{ needs.run_awo.outputs.run_id }}.tar.gz"
          mkdir -p extracted
          tar -xzf "$TAR" -C extracted
          rsync -a extracted/runs/ runs/
          echo "RUN_ID=${{ needs.run_awo.outputs.run_id }}" >> "$GITHUB_ENV"
          echo "Finalizing ${{ needs.run_awo.outputs.run_id }}" >> "$GITHUB_STEP_SUMMARY"

      - name: Write approval record
        shell: bash
        run: |
          set -e
          mkdir -p "runs/${RUN_ID}"
          cat > "runs/${RUN_ID}/approval.json" <<EOF
          {
            "run_id": "${RUN_ID}",
            "approved_by": "${{ github.actor }}",
            "approved_at": "$(date -u +%FT%TZ)",
            "workflow_run_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF

      - name: Commit run to branch
        shell: bash
        run: |
          set -e
          BR="${GITHUB_REF_NAME:-main}"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin "$BR" --depth=1
          git switch "$BR"
          git add "runs/${RUN_ID}" || true
          if git diff --staged --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "AWO: add ${RUN_ID} (human-approved) [skip ci]"
          git push origin "$BR"
