name: AWO Run (Manual Approve to Commit)

on:
  workflow_dispatch:
    inputs:
      workflow_file:
        description: "Workflow JSON path (relative to repo root)"
        required: true
        default: "workflows/multimodel.json"

permissions:
  contents: write

concurrency:
  group: awo-run
  cancel-in-progress: true

jobs:
  # -------------------- Preflight: repo + JSON sanity ------------------------
  validate_workflow_json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show workspace / confirm paths
        shell: bash
        run: |
          set -euxo pipefail
          echo "pwd=$(pwd)"
          echo "Repo tree (depth 2):"
          find . -maxdepth 2 -type d -print
          echo "Requested workflow_file: '${{ github.event.inputs.workflow_file }}'"
          if [ -f "${{ github.event.inputs.workflow_file }}" ]; then
            echo "OK: workflow file exists."
          else
            echo "::error::Workflow file NOT found at '${{ github.event.inputs.workflow_file }}'."
            echo "Hint: verify the path relative to repo root."
            exit 1
          fi

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Validate JSON syntax
        shell: bash
        run: |
          set -euxo pipefail
          jq . "${{ github.event.inputs.workflow_file }}" >/dev/null
          echo "Workflow JSON is valid."

      - name: (Optional) Validate against schema if present
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Run schema validation
        if: ${{ hashFiles('workflows/schema.json') != '' }}
        shell: bash
        run: |
          set -euxo pipefail
          python - <<'PY'
          import json, sys
          from jsonschema import Draft202012Validator
          wf_path = "${{ github.event.inputs.workflow_file }}"
          schema_path = "workflows/schema.json"
          with open(wf_path) as f: data = json.load(f)
          with open(schema_path) as f: schema = json.load(f)
          Draft202012Validator(schema).validate(data)
          print("Workflow JSON passes schema.")
          PY

  # -------------------- Core run --------------------------------------------
  run_awo:
    needs: validate_workflow_json
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.capture.outputs.run_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Debug Python & files
        shell: bash
        run: |
          set -euxo pipefail
          python -V
          ls -la
          ls -la scripts || true
          stat scripts/awo_run.py || true
          echo "Using workflow file: '${{ github.event.inputs.workflow_file }}'"

      - name: Execute AWO workflow
        id: runstep
        shell: bash
        run: |
          set +e
          set -x
          python scripts/awo_run.py "${{ github.event.inputs.workflow_file }}"
          code=$?
          set +x
          echo "runner_exit_code=$code" >> "$GITHUB_ENV"

          echo "---- runs/ dir after execution (if any) ----"
          (ls -la runs && find runs -maxdepth 2 -type f | sed 's/^/- /') || echo "No runs/ directory."

          if [ "$code" = "78" ]; then
            echo "Audit: PENDING (human approval required)" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          elif [ "$code" = "0" ]; then
            echo "Audit: PASSED (still requires manual approval to commit)" >> "$GITHUB_STEP_SUMMARY"
            exit 0
          else
            echo "::error::AWO runner exited with code $code"
            # Do NOT fail the step here; we still want to attempt capture/diagnostics.
            exit 0
          fi

      - name: Capture Run-ID (breadcrumb if present)
        id: capture
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f runs/LAST_RUN ]; then
            echo "::warning::runs/LAST_RUN not found (runner may have exited before creating a run)."
            echo "run_id=none" >> "$GITHUB_OUTPUT"
            echo "RUN_ID=none" >> "$GITHUB_ENV"
            exit 0
          fi
          RID="$(cat runs/LAST_RUN)"
          case "$RID" in
            (*[!A-Za-z0-9._-]*|'') echo "::warning::Invalid RUN_ID '$RID'"; RID="none";;
          esac
          if [ "$RID" != "none" ] && [ ! -d "runs/$RID" ]; then
            echo "::warning::Run directory missing: runs/$RID"
            RID="none"
          fi
          echo "Run-ID: $RID" >> "$GITHUB_STEP_SUMMARY"
          echo "RUN_ID=$RID" >> "$GITHUB_ENV"
          echo "run_id=$RID" >> "$GITHUB_OUTPUT"

      - name: Create payload (if run exists)
        if: ${{ steps.capture.outputs.run_id != 'none' && steps.capture.outputs.run_id != '' }}
        shell: bash
        run: |
          set -euo pipefail
          tar -czf "awo-run-${RUN_ID}.tar.gz" "runs/${RUN_ID}"

      - name: Upload payload
        if: ${{ steps.capture.outputs.run_id != 'none' && steps.capture.outputs.run_id != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: awo-run-${{ env.RUN_ID }}
          path: awo-run-${{ env.RUN_ID }}.tar.gz
          if-no-files-found: error
          retention-days: 14

  # -------------------- Render human summary (only if run exists) -----------
  render_summary:
    needs: run_awo
    if: ${{ needs.run_awo.outputs.run_id != '' && needs.run_awo.outputs.run_id != 'none' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download payload
        uses: actions/download-artifact@v4
        with:
          name: awo-run-${{ needs.run_awo.outputs.run_id }}
          path: artifacts

      - name: Extract run
        id: locate
        shell: bash
        run: |
          set -euo pipefail
          TAR="artifacts/awo-run-${{ needs.run_awo.outputs.run_id }}.tar.gz"
          mkdir -p extracted && tar -xzf "$TAR" -C extracted
          RD="extracted/runs/${{ needs.run_awo.outputs.run_id }}"
          echo "rd=$RD" >> "$GITHUB_OUTPUT"
          echo "### Files" >> "$GITHUB_STEP_SUMMARY"
          find "$RD" -maxdepth 2 -type f | sed 's/^/- /' >> "$GITHUB_STEP_SUMMARY"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Show scope summary (if present)
        shell: bash
        run: |
          set -euo pipefail
          RD="${{ steps.locate.outputs.rd }}"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "## Scope Gate — Machine Check" >> "$GITHUB_STEP_SUMMARY"
          if [ -f "$RD/scope/summary.json" ]; then
            OVERALL="$(jq -r '.overall_ok' "$RD/scope/summary.json" 2>/dev/null || echo null)"
            echo "**overall_ok:** \`$OVERALL\`" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo '```json' >> "$GITHUB_STEP_SUMMARY"
            cat "$RD/scope/summary.json" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          else
            echo "_No scope/summary.json found (scope_validate may be missing)._" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Show run report excerpt
        shell: bash
        run: |
          set -euo pipefail
          RD="${{ steps.locate.outputs.rd }}"
          if [ -f "$RD/report.md" ]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "## Run Report (excerpt)" >> "$GITHUB_STEP_SUMMARY"
            head -n 120 "$RD/report.md" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "_Full report will be committed after approval._" >> "$GITHUB_STEP_SUMMARY"
          fi

  # -------------------- Early manual gate (Scope) ----------------------------
  scope_gate:
    needs: [run_awo, render_summary]
    if: ${{ needs.run_awo.outputs.run_id != '' && needs.run_awo.outputs.run_id != 'none' }}
    runs-on: ubuntu-latest
    environment:
      name: awo-scope
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Await scope approval
        run: echo "Scope Gate — review the 'render_summary' job summary above, then approve this environment to continue."

  # -------------------- Final manual gate (Merge) ----------------------------
  human_approval:
    needs: [run_awo, scope_gate]
    if: ${{ needs.run_awo.outputs.run_id != '' && needs.run_awo.outputs.run_id != 'none' }}
    runs-on: ubuntu-latest
    environment:
      name: awo-audit
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: Await merge approval
        run: echo "Merge Gate — Approve in Environment 'awo-audit' to commit run to the repo."

  # -------------------- Commit artifacts after approval ----------------------
  finalize:
    needs: [run_awo, human_approval]
    if: ${{ needs.run_awo.outputs.run_id != '' && needs.run_awo.outputs.run_id != 'none' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with credentials)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Download payload
        uses: actions/download-artifact@v4
        with:
          name: awo-run-${{ needs.run_awo.outputs.run_id }}
          path: artifacts

      - name: Extract run folder (guarded)
        shell: bash
        run: |
          set -euo pipefail
          RID="${{ needs.run_awo.outputs.run_id }}"
          TAR="artifacts/awo-run-${RID}.tar.gz"
          mkdir -p extracted && tar -xzf "$TAR" -C extracted
          rsync -a extracted/runs/ runs/
          echo "RUN_ID=${RID}" >> "$GITHUB_ENV"
          echo "Finalizing ${RID}" >> "$GITHUB_STEP_SUMMARY"

      - name: Write approval record
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "runs/${RUN_ID}"
          cat > "runs/${RUN_ID}/approval.json" <<EOF
          {
            "run_id": "${RUN_ID}",
            "approved_by": "${{ github.actor }}",
            "approved_at": "$(date -u +%FT%TZ)",
            "workflow_run_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF

      - name: Commit run to branch
        shell: bash
        run: |
          set -euo pipefail
          BR="${GITHUB_REF_NAME:-main}"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin "$BR" --depth=1
          git switch "$BR"
          git add "runs/${RUN_ID}" || true
          if git diff --staged --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "AWO: add ${RUN_ID} (human-approved) [skip ci]"
          git push origin "$BR"
  run_and_validate:
    needs: validate_workflow_json
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies for schema validation
        run: |
          python -m pip install --upgrade pip
          pip install jsonschema

      - name: Run AWO workflow
        shell: bash
        run: |
          set -euo pipefail
          WF="${{ github.event.inputs.workflow_file }}"
          echo "[AWO] Running workflow: $WF"
          test -f "$WF" || { echo "::error::Workflow file not found: $WF"; exit 1; }
          python scripts/awo_run.py "$WF" || EXIT=$?
          if [[ "${EXIT:-0}" != "0" && "${EXIT:-0}" != "78" ]]; then
            echo "::error::Runner exited with code ${EXIT}"
            exit "${EXIT}"
          fi
          echo "runner_exit_code=${EXIT:-0}" >> "$GITHUB_OUTPUT"

      - name: Discover LAST_RUN directory
        id: last
        shell: bash
        run: |
          set -euo pipefail
          test -f runs/LAST_RUN || { echo "::error::runs/LAST_RUN not found"; exit 1; }
          RUN_DIR="runs/$(cat runs/LAST_RUN | tr -d '\n\r')"
          echo "RUN_DIR=${RUN_DIR}"
          test -d "${RUN_DIR}" || { echo "::error::Run directory ${RUN_DIR} not found"; exit 1; }
          echo "run_dir=${RUN_DIR}" >> "$GITHUB_OUTPUT"

      - name: Validate run_manifest.json and provenance.json against schemas
        shell: bash
        run: |
          set -euo pipefail
          python - << 'PYEOF'
import json, sys, pathlib
from jsonschema import Draft202012Validator

repo = pathlib.Path(".").resolve()
schemas = repo / "schemas"
run_dir = pathlib.Path("${{ steps.last.outputs.run_dir }}").resolve()

def load(p):
    with open(p, "r", encoding="utf-8") as f:
        return json.load(f)

man = load(run_dir / "run_manifest.json")
prov = load(run_dir / "provenance.json")
man_schema = load(schemas / "run_manifest.schema.json")
prov_schema = load(schemas / "provenance.schema.json")

Draft202012Validator(man_schema).validate(man)
if not isinstance(prov, list):
    print(f"::error file={run_dir/'provenance.json'},line=1::provenance.json must be a list")
    sys.exit(2)
for i, rec in enumerate(prov):
    try:
        Draft202012Validator(prov_schema).validate(rec)
    except Exception as e:
        print(f"::error file={run_dir/'provenance.json'},line=1::Provenance record {i} invalid: {e}")
        raise
print('Schema validation OK')
PYEOF

      - name: Upload run artifacts (for debugging)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: awo-run-${{ steps.last.outputs.run_dir }}
          path: |
            ${{ steps.last.outputs.run_dir }}/run_manifest.json
            ${{ steps.last.outputs.run_dir }}/provenance.json
            ${{ steps.last.outputs.run_dir }}/workflow_frozen.json
            ${{ steps.last.outputs.run_dir }}/report.md
            ${{ steps.last.outputs.run_dir }}/steps
            ${{ steps.last.outputs.run_dir }}/artifacts

      - name: Exit with pending when gate triggered
        shell: bash
        run: |
          echo "Runner exit code was: ${runner_exit_code:-0}"
          if [[ "${runner_exit_code:-0}" == "78" ]]; then
            echo "::notice::Run is pending human review (audit gate)."
            exit 0
          fi
  
