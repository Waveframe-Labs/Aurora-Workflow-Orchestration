name: AWO Run (Manual Approve to Commit)

on:
  workflow_dispatch:
    inputs:
      workflow_file:
        description: "Workflow JSON path"
        required: true
        default: "workflows/multimodel.json"

permissions:
  contents: write

concurrency:
  group: awo-run
  cancel-in-progress: false

jobs:
  run_awo:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.capture.outputs.run_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Execute AWO workflow
        id: runstep
        shell: bash
        run: |
          set +e
          python scripts/awo_run.py "${{ github.event.inputs.workflow_file }}"
          code=$?
          echo "runner_exit_code=$code" >> $GITHUB_ENV
          if [ "$code" = "78" ]; then
            echo "Audit: PENDING (human approval will be required)" >> $GITHUB_STEP_SUMMARY
          else
            echo "Audit: PASSED (this workflow still requires manual approval)" >> $GITHUB_STEP_SUMMARY
          fi
          # Always continue to approval; we will package whatever run was created.
          exit 0

      - name: Capture Run-ID (from breadcrumb)
        id: capture
        shell: bash
        run: |
          set -e
          if [ ! -f runs/LAST_RUN ]; then
            echo "No LAST_RUN breadcrumb found. Did the script create a run?" >&2
            echo "run_id=none" >> $GITHUB_OUTPUT
            exit 1
          fi
          RID="$(cat runs/LAST_RUN)"
          if [ ! -d "runs/$RID" ]; then
            echo "LAST_RUN points to missing directory: runs/$RID" >&2
            echo "run_id=none" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "Run-ID: $RID" >> $GITHUB_STEP_SUMMARY
          echo "RUN_ID=$RID" >> $GITHUB_ENV
          echo "run_id=$RID" >> $GITHUB_OUTPUT

      - name: Create payload
        shell: bash
        run: |
          set -e
          tar -czf "awo-run-${RUN_ID}.tar.gz" "runs/${RUN_ID}"

      - name: Upload payload
        uses: actions/upload-artifact@v4
        with:
          name: awo-run-${{ env.RUN_ID }}
          path: awo-run-${{ env.RUN_ID }}.tar.gz
          if-no-files-found: error

  human_approval:
    needs: run_awo
    runs-on: ubuntu-latest
    environment:
      name: awo-audit
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - run: echo "Manual approval gate â€” approve in Environment 'awo-audit' to continue."

  finalize:
    needs: [run_awo, human_approval]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Download run artifact
        uses: actions/download-artifact@v4
        with:
          name: awo-run-${{ needs.run_awo.outputs.run_id }}
          path: artifacts

      - name: Extract run folder
        shell: bash
        run: |
          set -e
          ls -l artifacts
          TAR="artifacts/awo-run-${{ needs.run_awo.outputs.run_id }}.tar.gz"
          [ -f "$TAR" ] || { echo "Artifact tarball not found: $TAR" >&2; exit 1; }
          mkdir -p extracted
          tar -xzf "$TAR" -C extracted
          # Copy the run folder into repo
          rsync -a extracted/runs/ runs/
          RID=$(ls -1dt runs/run_* | head -n1 | xargs -n1 basename)
          echo "RUN_ID=$RID" >> $GITHUB_ENV
          echo "Finalizing $RID" >> $GITHUB_STEP_SUMMARY

      - name: Write approval record
        shell: bash
        run: |
          set -e
          mkdir -p "runs/${RUN_ID}"
          cat > "runs/${RUN_ID}/approval.json" <<EOF
          {
            "run_id": "${RUN_ID}",
            "approved_by": "${{ github.actor }}",
            "approved_at": "$(date -u +%FT%TZ)",
            "workflow_run_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF

      - name: Build consolidated run_summary.json
        shell: bash
        run: |
          set -e
          RUN_DIR="runs/${RUN_ID}"

          # Ensure the files exist (some may be absent depending on the path taken)
          test -f "${RUN_DIR}/index.json" || echo '{}' > "${RUN_DIR}/index.json"
          test -f "${RUN_DIR}/approval.json" || echo '{}' > "${RUN_DIR}/approval.json"

          STEP_COUNT=$(ls -1 "${RUN_DIR}/steps" 2>/dev/null | wc -l | tr -d ' ')
          NOTE_COUNT=$(find "${RUN_DIR}/artifacts/notes" -type f 2>/dev/null | wc -l | tr -d ' ')
          HAS_REPORT=$([ -f "${RUN_DIR}/report.md" ] && echo true || echo false)

          jq -n \
            --slurpfile idx "${RUN_DIR}/index.json" \
            --slurpfile apr "${RUN_DIR}/approval.json" \
            --arg steps "$STEP_COUNT" \
            --arg notes "$NOTE_COUNT" \
            --arg has_report "$HAS_REPORT" \
            '{
              run_id: ($idx[0].run_id // "unknown"),
              started_at: ($idx[0].started_at // null),
              finished_at: ($idx[0].finished_at // null),
              status: ($idx[0].status // "unknown"),
              approval: $apr[0],
              stats: {
                step_files: ($steps|tonumber),
                note_files: ($notes|tonumber),
                report_md: ($has_report == "true")
              }
            }' > "${RUN_DIR}/run_summary.json"

          echo "Wrote ${RUN_DIR}/run_summary.json"

      - name: Commit run to branch
        shell: bash
        run: |
          set -e
          BR="${GITHUB_REF_NAME:-main}"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin "$BR" --depth=1
          git switch "$BR"
          git add "runs/${RUN_ID}" || true
          if git diff --staged --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "AWO: add ${RUN_ID} (human-approved) [skip ci]"
          git push origin "$BR"
