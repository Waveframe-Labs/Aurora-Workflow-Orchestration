name: AWO Run (Manual)

on:
  workflow_dispatch:
    inputs:
      workflow_file:
        description: "Workflow JSON path"
        required: true
        default: "workflows/reviews.json"

permissions:
  contents: write

concurrency:
  group: awo-run
  cancel-in-progress: false

jobs:
  run-awo:
    runs-on: ubuntu-latest
    outputs:
      audit: ${{ steps.runstep.outputs.audit }}
      run_id: ${{ steps.findrun.outputs.run_id }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run workflow (simulate audit gate)
        id: runstep
        shell: bash
        run: |
          set +e
          python scripts/awo_run.py "${{ github.event.inputs.workflow_file }}"
          code=$?
          if [ $code -eq 78 ]; then
            echo "audit=PENDING" >> "$GITHUB_OUTPUT"
            echo "Audit: PENDING â€” waiting for human approval." >> "$GITHUB_STEP_SUMMARY"
            exit 0
          else
            echo "audit=PASSED" >> "$GITHUB_OUTPUT"
            echo "Audit: PASSED automatically." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Find latest run id
        id: findrun
        shell: bash
        run: |
          RID=$(ls -1dt runs/* 2>/dev/null | head -n1 | xargs -n1 basename)
          echo "run_id=$RID" >> "$GITHUB_OUTPUT"
          echo "Run-ID: $RID" >> "$GITHUB_STEP_SUMMARY"

      - name: Create tar
        if: ${{ always() && steps.findrun.outputs.run_id != '' }}
        run: tar -czf "${{ steps.findrun.outputs.run_id }}.tar.gz" "runs/${{ steps.findrun.outputs.run_id }}"

      - name: Upload artifact
        if: ${{ always() && steps.findrun.outputs.run_id != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: awo-run-${{ steps.findrun.outputs.run_id }}
          path: ${{ steps.findrun.outputs.run_id }}.tar.gz

  human-approval:
    needs: run-awo
    if: ${{ needs.run-awo.outputs.audit == 'PENDING' && needs.run-awo.outputs.run_id != '' }}
    runs-on: ubuntu-latest
    environment: awo-audit
    steps:
      - name: Await human approval
        run: echo "Approve or reject this deployment in Environment: awo-audit."

  finalize-auto:
    needs: run-awo
    if: ${{ needs.run-awo.outputs.audit == 'PASSED' && needs.run-awo.outputs.run_id != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Commit run folder to main (auto-pass)
        shell: bash
        run: |
          set -e
          BRANCH="${{ github.ref_name }}"
          RID="${{ needs.run-awo.outputs.run_id }}"
          [ -d "runs/$RID" ] || { echo "No run folder found"; exit 0; }
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git switch "$BRANCH"
          git add "runs/$RID" || true
          if git diff --staged --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "AWO: add $RID (auto-pass)"
          git push origin "$BRANCH"

  finalize-approved:
    needs: [run-awo, human-approval]
    if: ${{ needs.run-awo.outputs.audit == 'PENDING' && needs.run-awo.outputs.run_id != '' && needs.human-approval.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Commit run folder to main (human-approved)
        shell: bash
        run: |
          set -e
          BRANCH="${{ github.ref_name }}"
          RID="${{ needs.run-awo.outputs.run_id }}"
          [ -d "runs/$RID" ] || { echo "No run folder found"; exit 0; }
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git switch "$BRANCH"
          git add "runs/$RID" || true
          if git diff --staged --quiet; then
            echo "No changes to commit."
            exit 0
          fi
          git commit -m "AWO: add $RID (human-approved)"
          git push origin "$BRANCH"
